@page
@model SGBApp.Pages.Loans.IndexModel
@{
    ViewData["Title"] = "Préstamos";
}

<div class="d-flex justify-content-between align-items-center">
    <h2>Préstamos</h2>
    <a class="btn btn-primary" asp-page="Create">Registrar Préstamo</a>
</div>

<form class="mt-3">
    <div class="input-group">
        <input type="text" id="searchBox" class="form-control" placeholder="Buscar préstamo (libro, estudiante, estado...)" />
        <a asp-page="Index" class="btn btn-outline-danger">Limpiar</a>
    </div>
</form>

<table class="table table-striped mt-3" id="loansTable">
    <thead>
        <tr>
            <th onclick="sortTable(0)">Libro ⬍</th>
            <th onclick="sortTable(1)">Estudiante ⬍</th>
            <th onclick="sortTable(2)">Préstamo ⬍</th>
            <th onclick="sortTable(3)">Vencimiento ⬍</th>
            <th onclick="sortTable(4)">Devolución ⬍</th>
            <th onclick="sortTable(5)">Estado ⬍</th>
            <th onclick="sortTable(6)">Multa ⬍</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var l in Model.Loans)
        {
            <tr>
                <td>@l.Book?.Title</td>
                <td>@l.Student?.Name</td>
                <td>@l.LoanDate.ToLocalTime().ToString("yyyy-MM-dd")</td>
                <td>@l.DueDate.ToLocalTime().ToString("yyyy-MM-dd")</td>
                <td>@(l.ReturnDate.HasValue? l.ReturnDate.Value.ToLocalTime().ToString("yyyy-MM-dd") : "-")</td>
                <td>@l.Status</td>
                <td>@l.FineAmount.ToString("F2")</td>
                <td>
                    <a asp-page="Edit" asp-route-id="@l.Id" class="btn btn-sm btn-warning" title="Editar">
                        <i class="bi bi-pencil"></i>
                    </a>
                    @if (l.Status == "Prestado")
                    {
                        <a asp-page="Return" asp-route-id="@l.Id" class="btn btn-sm btn-warning" title="Registrar Devolución">
                            <i class="bi bi-arrow-counterclockwise"></i>
                        </a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script>
        // 🔹 Filtro dinámico en vivo
        const searchBox = document.getElementById("searchBox");
        const rows = document.querySelectorAll("#loansTable tbody tr");

        searchBox.addEventListener("keyup", function () {
            const value = this.value.toLowerCase();
            rows.forEach(row => {
                const text = row.innerText.toLowerCase();
                row.style.display = text.includes(value) ? "" : "none";
            });
        });

        // 🔹 Ordenamiento de tabla
        function sortTable(columnIndex) {
            const table = document.getElementById("loansTable");
            const tbody = table.tBodies[0];
            const rows = Array.from(tbody.rows);

            const currentDir = table.getAttribute("data-sort-dir-" + columnIndex) || "asc";
            const newDir = currentDir === "asc" ? "desc" : "asc";
            table.setAttribute("data-sort-dir-" + columnIndex, newDir);

            rows.sort((a, b) => {
                let valA = a.cells[columnIndex].innerText.trim().toLowerCase();
                let valB = b.cells[columnIndex].innerText.trim().toLowerCase();

                if (!isNaN(valA) && !isNaN(valB)) {
                    valA = Number(valA);
                    valB = Number(valB);
                }

                if (valA < valB) return newDir === "asc" ? -1 : 1;
                if (valA > valB) return newDir === "asc" ? 1 : -1;
                return 0;
            });

            rows.forEach(row => tbody.appendChild(row));
        }
    </script>
}

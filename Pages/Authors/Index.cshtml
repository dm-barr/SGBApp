@page
@model SGBApp.Pages.Authors.IndexModel
@{
    ViewData["Title"] = "Autores";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">

<div class="d-flex justify-content-between align-items-center">
    <h2>Autores</h2>
    <a class="btn btn-primary" asp-page="Create">Nuevo Autor</a>
</div>

<form class="mt-3">
    <div class="input-group">
        <input type="text" id="searchBox" class="form-control" placeholder="Buscar autor o biografía..." />
        <a asp-page="Index" class="btn btn-outline-danger">Limpiar</a>
    </div>
</form>

<table class="table table-striped mt-3" id="authorsTable">
    <thead>
        <tr>
            <th onclick="sortTable(0)">Nombre ⬍</th>
            <th onclick="sortTable(1)">Biografía ⬍</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var a in Model.Authors)
        {
            <tr>
                <td>@a.Name</td>
                <td>@(string.IsNullOrEmpty(a.Biography) ? "-" : (a.Biography.Length > 100 ? a.Biography.Substring(0, 100) + "..." : a.Biography))</td>
                <td>
                    <a asp-page="Details" asp-route-id="@a.Id" class="btn btn-sm btn-info" title="Ver">
                        <i class="bi bi-eye"></i>
                    </a>
                    <a asp-page="Edit" asp-route-id="@a.Id" class="btn btn-sm btn-warning" title="Editar">
                        <i class="bi bi-pencil"></i>
                    </a>
                    <a asp-page="Delete" asp-route-id="@a.Id" class="btn btn-sm btn-danger" title="Eliminar">
                        <i class="bi bi-trash"></i>
                    </a>
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script>
        const searchBox = document.getElementById("searchBox");
        const rows = document.querySelectorAll("#authorsTable tbody tr");

        searchBox.addEventListener("keyup", function () {
            const value = this.value.toLowerCase();
            rows.forEach(row => {
                const text = row.innerText.toLowerCase();
                row.style.display = text.includes(value) ? "" : "none";
            });
        });

        function sortTable(columnIndex) {
            const table = document.getElementById("authorsTable");
            const tbody = table.tBodies[0];
            const rows = Array.from(tbody.rows);

            const currentDir = table.getAttribute("data-sort-dir-" + columnIndex) || "asc";
            const newDir = currentDir === "asc" ? "desc" : "asc";
            table.setAttribute("data-sort-dir-" + columnIndex, newDir);

            rows.sort((a, b) => {
                let valA = a.cells[columnIndex].innerText.trim().toLowerCase();
                let valB = b.cells[columnIndex].innerText.trim().toLowerCase();

                if (valA < valB) return newDir === "asc" ? -1 : 1;
                if (valA > valB) return newDir === "asc" ? 1 : -1;
                return 0;
            });

            rows.forEach(row => tbody.appendChild(row));
        }
    </script>
}

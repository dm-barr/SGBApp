@page
@model SGBApp.Pages.Reports.OverdueModel
@{
    ViewData["Title"] = "Préstamos vencidos";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">

<div class="d-flex justify-content-between align-items-center">
    <h2>Préstamos vencidos</h2>
</div>

<form class="mt-3">
    <div class="input-group">
        <input type="text" id="searchBox" class="form-control" placeholder="Buscar libro o estudiante..." />
        <a asp-page="Overdue" class="btn btn-outline-danger">Limpiar</a>
    </div>
</form>

<table class="table table-striped mt-3" id="overduesTable">
    <thead>
        <tr>
            <th onclick="sortTable(0)">Libro ⬍</th>
            <th onclick="sortTable(1)">Estudiante ⬍</th>
            <th onclick="sortTable(2)">Fecha límite ⬍</th>
            <th onclick="sortTable(3)">Días de retraso ⬍</th>
            <th onclick="sortTable(4)">Multa acumulada ⬍</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var r in Model.Overdues)
        {
            <tr>
                <td>@r.BookTitle</td>
                <td>@r.StudentName</td>
                <td>@r.DueDate.ToLocalTime().ToString("yyyy-MM-dd")</td>
                <td>@r.DaysLate</td>
                <td>@r.CurrentFine.ToString("F2")</td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script>
        const searchBox = document.getElementById("searchBox");
        const rows = document.querySelectorAll("#overduesTable tbody tr");

        searchBox.addEventListener("keyup", function () {
            const value = this.value.toLowerCase();
            rows.forEach(row => {
                const text = row.innerText.toLowerCase();
                row.style.display = text.includes(value) ? "" : "none";
            });
        });

        function sortTable(columnIndex) {
            const table = document.getElementById("overduesTable");
            const tbody = table.tBodies[0];
            const rows = Array.from(tbody.rows);

            const currentDir = table.getAttribute("data-sort-dir-" + columnIndex) || "asc";
            const newDir = currentDir === "asc" ? "desc" : "asc";
            table.setAttribute("data-sort-dir-" + columnIndex, newDir);

            rows.sort((a, b) => {
                let valA = a.cells[columnIndex].innerText.trim().toLowerCase();
                let valB = b.cells[columnIndex].innerText.trim().toLowerCase();

                if (!isNaN(valA) && !isNaN(valB)) {
                    valA = Number(valA);
                    valB = Number(valB);
                }

                if (valA < valB) return newDir === "asc" ? -1 : 1;
                if (valA > valB) return newDir === "asc" ? 1 : -1;
                return 0;
            });

            rows.forEach(row => tbody.appendChild(row));
        }
    </script>
}
